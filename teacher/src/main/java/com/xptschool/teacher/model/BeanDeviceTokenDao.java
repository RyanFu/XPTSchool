package com.xptschool.teacher.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEAN_DEVICE_TOKEN".
*/
public class BeanDeviceTokenDao extends AbstractDao<BeanDeviceToken, String> {

    public static final String TABLENAME = "BEAN_DEVICE_TOKEN";

    /**
     * Properties of entity BeanDeviceToken.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property DeviceToken = new Property(1, String.class, "deviceToken", false, "DEVICE_TOKEN");
        public final static Property ParamToken = new Property(2, String.class, "paramToken", false, "PARAM_TOKEN");
    };


    public BeanDeviceTokenDao(DaoConfig config) {
        super(config);
    }
    
    public BeanDeviceTokenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEAN_DEVICE_TOKEN\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userId
                "\"DEVICE_TOKEN\" TEXT," + // 1: deviceToken
                "\"PARAM_TOKEN\" TEXT);"); // 2: paramToken
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEAN_DEVICE_TOKEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BeanDeviceToken entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String deviceToken = entity.getDeviceToken();
        if (deviceToken != null) {
            stmt.bindString(2, deviceToken);
        }
 
        String paramToken = entity.getParamToken();
        if (paramToken != null) {
            stmt.bindString(3, paramToken);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BeanDeviceToken entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String deviceToken = entity.getDeviceToken();
        if (deviceToken != null) {
            stmt.bindString(2, deviceToken);
        }
 
        String paramToken = entity.getParamToken();
        if (paramToken != null) {
            stmt.bindString(3, paramToken);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BeanDeviceToken readEntity(Cursor cursor, int offset) {
        BeanDeviceToken entity = new BeanDeviceToken( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceToken
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // paramToken
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BeanDeviceToken entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDeviceToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParamToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BeanDeviceToken entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public String getKey(BeanDeviceToken entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
