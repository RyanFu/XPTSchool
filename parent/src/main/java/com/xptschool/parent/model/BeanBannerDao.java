package com.xptschool.parent.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEAN_BANNER".
*/
public class BeanBannerDao extends AbstractDao<BeanBanner, Void> {

    public static final String TABLENAME = "BEAN_BANNER";

    /**
     * Properties of entity BeanBanner.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Imageurl = new Property(0, String.class, "imageurl", false, "IMAGEURL");
        public final static Property Mode = new Property(1, String.class, "mode", false, "MODE");
        public final static Property Target = new Property(2, String.class, "target", false, "TARGET");
    };


    public BeanBannerDao(DaoConfig config) {
        super(config);
    }
    
    public BeanBannerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEAN_BANNER\" (" + //
                "\"IMAGEURL\" TEXT," + // 0: imageurl
                "\"MODE\" TEXT," + // 1: mode
                "\"TARGET\" TEXT);"); // 2: target
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEAN_BANNER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BeanBanner entity) {
        stmt.clearBindings();
 
        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(1, imageurl);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(2, mode);
        }
 
        String target = entity.getTarget();
        if (target != null) {
            stmt.bindString(3, target);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BeanBanner entity) {
        stmt.clearBindings();
 
        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(1, imageurl);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(2, mode);
        }
 
        String target = entity.getTarget();
        if (target != null) {
            stmt.bindString(3, target);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BeanBanner readEntity(Cursor cursor, int offset) {
        BeanBanner entity = new BeanBanner( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // imageurl
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // target
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BeanBanner entity, int offset) {
        entity.setImageurl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTarget(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BeanBanner entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BeanBanner entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
